#!/usr/bin/env python
import pickle
import thread
import serial
import sys
from time import sleep, time

from scancam.scancam import *
from zaber.serial_connection import *
from zaber.linear_slides import *
from zaber.rotary_stages import *
#from scan_building_tools import *
from bst_camera.bst_camera import *

try:
    import argparse
except ImportError, err:
    syslogger.critical("Failed to import argparse")
    if version_info < (2, 7):
        syslogger.critical("your are running an older version of Python. argparse was added in Python 2.7 please add library manually")
        exit(1)
    else:
        raise err

import logging, idscam.common.syslogger

log = idscam.common.syslogger.get_syslogger('scancam')


def parse_arguments( argv ):
        # Parse config file and command line arguments
        parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
        parser.add_argument('-p', '--period', type=float, default=0.0, help="Minimum number of minutes between the start of scans. If the scan itself takes longer than the period, they will run back-to-back. Defaults to 0.")
        parser.add_argument('-l', '--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'CRITICAL'], default='INFO', help="Level of logging. Defaults to INFO")
        looping_group = parser.add_mutually_exclusive_group()
        looping_group.add_argument('-n', '--num-scans', type=int, default=1, help="Number of scans to perform before exiting. Defaults to 1")
        looping_group.add_argument('-c', '--continuous', action="store_true", help="Take scans continually without exiting")
        parser.add_argument('--skip-home-on-start', action='store_true', default=False, help="Stages automatically home on startup. This skips homing during development testing to avoid long startup waits for home and back")
        parser.add_argument('scanfile', type=argparse.FileType('rb'), help="Scan file name. Should include a pickled list of scans.")

        # The configs group of arguments is intended to be read from a configuration file.
        # They may be overwritten at the command line (useful during development).
        # TODO: make config file location configurable
        configs = parser.add_argument_group('configs', "Arguments generally read from scancam.conf file. May be overridden at command line")
        configs.add_argument('-s', '--serial-dev', default='/dev/ttyUSB0', help="Serial device identifier. Linux example: '/dev/ttyUSB0', Windows example: 'COM1'")
        configs.add_argument('--stage-timeout', type=int, default=100, help="Number of seconds for stages to try on move before timing out")
        configs.add_argument('--camera-warmup', type=float, default=0.0, help="Time in seconds (float) between camera system call and beginning of clip. Used to adjust speed of video-through-depth z-axis move") 

        # The values are ready from the configuration file first in the list so that
        # command line arguments may supercede them if given
        # FIXME: Putting the config file in /etc/ is pretty Linux-centric. Should find better cross-platform way to handle this
        args = parser.parse_args(['@/etc/scancam.conf'] + argv[1:])

        # Set up logging
        if args.log_level == 'DEBUG':
                log.setLevel(logging.DEBUG)
        elif args.log_level == 'INFO':
                log.setLevel(logging.INFO)
        elif args.log_level == 'WARNING':
                log.setLevel(logging.WARNING)
        elif args.log_level == 'CRITICAL':
                log.setLevel(logging.CRITICAL)
        else:
                print "Logging level not available. Exiting."
                sys.exit(1)

        log.critical("Logging critical messages.")
        log.error("Logging error messages")
        log.warning("Logging warning messages.")
        log.info("Logging info messages")
        log.debug("Logging debug messages")

        return args



if __name__ == '__main__':

        # parse arguments
        # scancam [OPTION]... [SCANFILE]...
        #
        # -p, --minimum-period in minutes
        args = parse_arguments(sys.argv)

        # Log all variables handled by config file and command line args
        log.info("Variables handled by config file and command line args:")
        arg_dict = vars(args)
        for arg in arg_dict:
                log.info("    " + arg + ": " + str(arg_dict[arg]))

        # open file and unpickle the scan
        scan_list = pickle.load(args.scanfile)
        args.scanfile.close()

        # List scan(s) at startup
        # scan is scan class containing a list of scanpoints represented as dictionaries with the keys:
        #	x	x-axis target location in mm
        #	theta	rotary stage target location in deg
        #	z	z-axis target location in mm
        #	t	time in seconds to record video
        for scan in scan_list:
                scan.log_scan_contents( log, logging.INFO )        

        # Put everything in try statement so that we can finally close the serial port on any error
        completed_scan_sets = 0
        try:
                # Create serial connection
                try:
                        ser = serial_connection(args.serial_dev)
                except serial.SerialException, errmsg:
                        log.critical("Error constructing serial connection: " + errmsg)
                        log.critical("If we don't have a serial connection, we're dead in the water. Exiting.")
                        sys.exit(1)
                        
                # TODO Flush serial port and anything else necessary to have clean comm start

                # Derive verbosity for stages from log level
                if args.log_level == 'DEBUG':
                        verbose = True
                else:
                        verbose = False

                # Instantiate the axes
                # From T-LSM200A specs: mm_per_rev = .047625 um/microstep * 64 microstep/step * 200 steps/rev * .001 mm/um = .6096 mm/rev
                x_stage = linear_slide(ser, 1, mm_per_rev = .6096, verbose = verbose, run_mode = STEP)

                # From T-RS60A specs: .000234375 deg/microstep * 64 microsteps/step = .015 deg/step
                theta_stage = rotary_stage(ser, 2, deg_per_step = .015, verbose = verbose, run_mode = STEP)

                # From LSA10A-T4 specs: mm_per_rev = .3048 mm/rev
                #z_stage = linear_slide(ser, 3, mm_per_rev = .3048, verbose = verbose, run_mode = STEP)

                camera = UeyeCamera( cam_id = 1, log_level = log.getEffectiveLevel() ) 

                scancam = XThetaZScanCam( [ x_stage, theta_stage ], 
                                           camera, 
                                           stage_timeout = args.stage_timeout,
                                           camera_warmup = args.camera_warmup )

                # Open serial connection. This starts the queue handler
                log.debug("Opening serial connection in thread")
                thread.start_new_thread( ser.open, ())

                # TODO: Send command to reset stages to defaults
                # TODO: Read in the default target speed for z so we can use it for z0 moves

                if not args.skip_home_on_start:
                        scancam.home()
                                                        
                # Loop and continually scan with a timed periodicity
                last_scan_start_time = 0
                announced_wait_period = False
                while (1):

                        # Once a second, check to see if it's time to start a new scan
                        if time() < last_scan_start_time + args.period*60.0:
                                if announced_wait_period == False:
                                        log.info("Waiting %f minutes before next scan" % ((last_scan_start_time - time())/60.0) )
                                        announced_wait_period = True
                                sleep(1)
                                continue
                        # TODO: Handle start time of scans that error out
                        announced_wait_time = False
                        last_scan_start_time = time()
                        
                               
                        # Walk through scans
                        log.info("Starting scan set number" + str(completed_scan_sets + 1))
                        for scan in scan_list:
                                scancam.scan_action(scan)
  
                        completed_scan_sets += 1

                        if not args.continuous and completed_scans == args.num_scans:
                                break
                        
        except KeyboardInterrupt:
                 log.debug("Completed %d scan sets." % completed_scan_sets)


        finally:
                # Send stop command to all devices
                try:
                        scancam
                        scancam.stop()
                except NameError:
                        # If the scancam has not been intitialized, don't stop it
                        pass
                
                # Close serial connection before final exit
                log.info("Closing serial connection")
                ser.close()
                log.info("Connection closed")

